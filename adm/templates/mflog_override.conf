# This file can be used to override the minimal log level of mflog/python logging
# set in the {% raw %}${{% endraw %}{{MFMODULE}}_LOG_MINIMAL_LEVEL{% raw %}}{% endraw %}
# environment variable for specific loggers (only).
#
# => If you want to change globally the minimal log level, change the
# "minimal_level" key in "[log]" section of the {{MFMODULE_LOWERCASE}} module
# configuration.
#
# => If you don't want to change globally the minimal log level but if you want
# to change the minimal log level for specific loggers, this file is made for you.
#
# Note that you can find other locations for this file with an override priority
# (the first override wins):
# - /etc/metwork.config.d/{{MFMODULE_LOWERCASE}}/mflog_override.conf (admin configuration)
# - {{MFMODULE_RUNTIME_HOME}}/config/mflog_override.conf (this file!)
# - {{MFMODULE_HOME}}/config/mflog_override.conf
#   (metwork developer provided configuration for {{MFMODULE_LOWERCASE}} module)
#   => don't change this file (never) (never) (never) (never) (never)
# - {{MFEXT_HOME}}/config/mflog_override.conf
#   (metwork developer provided configuration for {{MFMODULE_LOWERCASE}} module)
#   => don't change this file (never) (never) (never) (never) (never)
#
# Syntax:
# - lines beginning with # are comments
# - first match wins
# - several lines like {logger_name_with_fnmatch_wildcards} => {log_level}
#
# Examples:
#
# # this line say 'foo.bar' logger will have a minimal level of WARNING
# foo.bar => WARNING
#
# # this line say 'foo.*' loggers will have a minimal level of DEBUG
# # (see python fnmatch for accepted wildcards)
# foo.* => DEBUG
